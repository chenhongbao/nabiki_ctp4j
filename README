SWIG Based Java-Port for CTP
============================

Requisites
----------

1. JDK 11.0.5
2. SWIG 4.0.2

Installation notes
------------------

1. Build the codes

Build codes with four steps:

1) Clone this repository and `cd` to the directory containing files like the above. It is root firectory.
2) Creare directories for generated files.
	
	mkdir cpp
	mkdir java
	
   or any other commands the does the same.
3) Run swig with the following command:
	
	swig -c++ -java -package <your-package> -outdir java -o cpp/ctpapi_all_jni.cpp i/ctpapi_all.i
	
   Then you will have generated C++ files in diectory `./cpp` and java files in `./java`.
4) The `./build` directory contains IntellijIDEA project and Visual Studio solution ready to run.

   If you need to build java, copy the generated codes to `src/main/`. But I don't expect you to do so
   because the codes ready in projects have been modified somehow to avoid JNI problems. Just use the
   codes there to share my works.
   
   If you want to build C++, Move the generated C++ files in `./cpp` to the project directpry under 
   `./build/vc/` and build the solution.

2. Load library before using the API

It is vitally important to load libraries before access the API. To successfully load libraries, you need
to put both wrapper DLL that is built by this project and CTP DLL provided by FTDC into the searching
directories of JVM. JVM searches directories in %PATH% by default, plus JDK home. But if you want to place
the DLL in another directory, you should let JVM know by add -Djava.library.path=<your-path> as arguments
to java.exe.

Then in Java codes, you need to add the following 3 lines before using API:

	System.loadLibrary("thostmduserapi_se");
	System.loadLibrary("thosttraderapi_se");
	System.loadLibrary("thostctpapi_se-6.3.19-P1");
   
3. Diagnose DLL loading problems

Don't use Dependency Walker. On Windows 8+, system separates implementation from facade DLLs, referenced
via a plain link form the old to the new. The Dependency Walker doesn't know the issue and reports a lot
of module missing error.

Instead, you could use Process Mongitor by Microsoft as Sysinternals and follow some steps the locate the
problem:

1) Press `Capture` button, or press Ctrl+E to capture activities across the system.
2) Run your Java program until error comes out.
3) Press `Capture` again to stop capturing.
4) Open filter dialog(Ctrl+L) and add filtering expressions to find your problem. There are some key
   attribute for you to try:
   
   Process name -> is/contains -> java.exe         // Find the java application
   Result       -> contains    -> NOT              // PATH NOT FOUND or FILE NOT FOUND, JVM tests the
                                                   // exsistence of DLL by CREATE FILE
   Operation    -> is          -> Load image       // Check which DLL is loaded
   
4. Tackling `null upcall object` exception

It is caused by invalid C++ object(pointer) of Swig::Director, the parent class of your SPI wrapper. This
is done by JVM automatically after the Java counterpart is no long kept and garbage collected.

So you must keep the reference to your Java SPI instance explicitly, which means you should not code:

	api.RegisterSpi(new MySPI());

Instead, you are encouraged to code:

	this.spi = new MySPI();
	api.RegisterSpi(this.spi);
	
So Java won't garbage collect the Java SPI and its C++ counterpart stays alive.

5. Parallel invocation of JNI function causes JVM error

JNI is not supposed to call function in jni.h parallely because it causes JVM corrupt. This project
provides port to Java so I change the generated Java codes to enforce synchronized calling.
   
I add synchronized clause to Api methods, on a static Object. Yes, it is sychronized now.
   
Respects
--------
1. Many thanks to https://github.com/nicai0609 to inspire this project.
2. Process monitor website: https://docs.microsoft.com/en-us/sysinternals/downloads/procmon
2. World peace!



Good luck with your trades!

Hongbao Chen
chenhongbao@outlook.com